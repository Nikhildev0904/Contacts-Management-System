openapi: 3.0.3
info:
  title: Contacts API
  description: API for managing contacts.
  version: "1.0.0"

servers:
  - url: http://localhost:8080/

paths:
  /contacts:
    get:
      summary: Retrieve all contacts or search by name, phone, or category
      tags:
        - Contacts
      parameters:
        - name: contactName
          in: query
          required: false
          description: Filter contacts by name
          schema:
            type: string
        - name: phone
          in: query
          required: false
          description: Filter contacts by phone number
          schema:
            type: string
        - name: categoryName
          in: query
          required: false
          description: Filter contacts by category name
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number (zero-based indexing)
          schema:
            type: integer
            default: 0
        - name: pageSize
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          required: false
          description: Field to sort by (e.g. contactName, phone etc). Default is name.
          schema:
            type: string
            default: "contactName"
        - name: sortOrder
          in: query
          required: false
          description: Sort order for the field "asc" or "desc". Default is asc.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: "asc"
      responses:
        '200':
          description: List of contacts (filtered or all)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedContacts'
        '400':
          description: Invalid query parameters
    post:
      summary: Create a new contact
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreate'
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid input data
        '409':
          description: Contact already exists (e.g., duplicate phone number)

  /contacts/{contactId}:
    get:
      summary: Retrieve a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: Unique ID of the contact
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A contact object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found
    put:
      summary: Update a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: Unique ID of the contact
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUpdate'
      responses:
        '200':
          description: Contact updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid request body
        '404':
          description: Contact not found
    delete:
      summary: Delete a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: Unique ID of the contact
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contact deleted successfully
        '404':
          description: Contact not found

  /contacts/{contactId}/categories:
    get:
      summary: List categories for a contact
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: Unique ID of the contact
          schema:
            type: string
            format: uuid
        - name: categoryName
          in: query
          required: false
          description: Filter categories by name
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number (zero-based indexing)
          schema:
            type: integer
            default: 0
        - name: pageSize
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          required: false
          description: Field to sort categories by (e.g. categoryName). Default is CategoryName.
          schema:
            type: string
            default: "categoryName"
        - name: sortOrder
          in: query
          required: false
          description: Sort order for the field "asc" or "desc". Default is asc.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: "asc"
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCategories'
        '404':
          description: Contact not found

  /contacts/{contactId}/categories/{categoryId}:
    put:
      summary: Assign a category to a contact
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: Unique ID of the contact
          schema:
            type: string
            format: uuid
        - name: categoryId
          in: path
          required: true
          description: Unique ID of the category
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category assigned successfully
        '404':
          description: Contact or category not found
    delete:
      summary: Remove a category from a contact
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category removed from contact
        '404':
          description: Contact or category not found

  /categories:
    get:
      summary: Retrieve all categories
      tags:
        - Categories
      parameters:
        - name: categoryName
          in: query
          required: false
          description: Filter categories by name
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number (zero-based indexing)
          schema:
            type: integer
            default: 0
        - name: pageSize
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          required: false
          description: Field to sort categories by (e.g. categoryName). Default is CategoryName.
          schema:
            type: string
            default: "categoryName"
        - name: sortOrder
          in: query
          required: false
          description: Sort order for the field "asc" or "desc". Default is asc.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: "asc"
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCategories'
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input data
        '409':
          description: Category already exists with the same name

  /categories/{categoryId}:
    get:
      summary: Retrieve a category by ID
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique ID of the category
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      summary: Update a category
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique ID of the category
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request body
        '404':
          description: Category not found
        '409':
          description: Category name already in use
    delete:
      summary: Delete a category
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique ID of the category
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found

  /categories/{categoryId}/contacts:
    get:
      summary: List contacts for a category
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique ID of the category
          schema:
            type: string
            format: uuid
        - name: contactName
          in: query
          required: false
          description: Filter contacts by contactName
          schema:
            type: string
        - name: phone
          in: query
          required: false
          description: Filter contacts by phone number
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number (zero-based indexing)
          schema:
            type: integer
            default: 0
        - name: pageSize
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          required: false
          description: Field to sort contacts by (e.g. contactName). Default is contactName.
          schema:
            type: string
            default: "contactName"
        - name: sortOrder
          in: query
          required: false
          description: Sort order for the field "asc" or "desc". Default is asc.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: "asc"
      responses:
        '200':
          description: A list of contacts associated with the category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedContacts'
        '404':
          description: Category not found

components:
  schemas:
    Contact:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the contact
          example: "123e4567"
        contactName:
          type: string
          description: Full name of the contact
          example: "Nikhil Dev"
        phone:
          type: string
          description: Phone number of the contact
          example: "123-4567"
        email:
          type: string
          format: email
          description: Email address of the contact
          example: "nikhil@example.com"
        categories:
          type: array
          description: List of categories associated with the contact
          items:
            $ref: '#/components/schemas/Category'
      required:
        - id
        - contactName
        - phone

    ContactCreate:
      type: object
      properties:
        contactName:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        categoryIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - contactName
        - phone

    ContactUpdate:
      type: object
      properties:
        contactName:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        categoryIds:
          type: array
          items:
            type: string
            format: uuid

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the category
          example: "123e4"
        categoryName:
          type: string
          description: Name of the category (e.g., family, friends)
          example: "Friends"
        description:
          type: string
          description: Optional description of the category
          example: "Close friends"
      required:
        - id
        - categoryName

    CategoryCreate:
      type: object
      properties:
        categoryName:
          type: string
        description:
          type: string
          description: Optional description of the category
      required:
        - categoryName

    CategoryUpdate:
      type: object
      properties:
        categoryName:
          type: string
        description:
          type: string
          description: Optional description of the category

    PagedContacts:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        totalElements:
          type: integer
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        pageSize:
          type: integer
          description: Page size
          example: 20
        number:
          type: integer
          description: Current page number (0-based)
          example: 0
        numberOfElements:
          type: integer
          description: Number of elements in the current page
          example: 20
        first:
          type: boolean
          description: Whether this is the first page
          example: true
        last:
          type: boolean
          description: Whether this is the last page
          example: false
        empty:
          type: boolean
          description: Whether the page is empty
          example: false

    PagedCategories:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        totalElements:
          type: integer
          description: Total number of elements
          example: 50
        totalPages:
          type: integer
          description: Total number of pages
          example: 3
        pageSize:
          type: integer
          description: Page size
          example: 20
        number:
          type: integer
          description: Current page number (0-based)
          example: 0
        numberOfElements:
          type: integer
          description: Number of elements in the current page
          example: 20
        first:
          type: boolean
          description: Whether this is the first page
          example: true
        last:
          type: boolean
          description: Whether this is the last page
          example: false
        empty:
          type: boolean
          description: Whether the page is empty
          example: false